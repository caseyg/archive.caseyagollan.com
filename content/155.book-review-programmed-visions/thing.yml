title: Programmed Visions Book Review

date: 2012 January

external_link: http://rhizome.org/editorial/2012/jan/23/book-review-programmed-visions-software-and-memory

media_above_content: yes

link_label: Read at Rhizome.org

excerpt: &ldquo;As more and more people find themselves able to create things out of code, it feels critical to understand software on both a practical and fundamental level.&rdquo;

tags: Reading, Writing, Rhizome, Technology, New York

content: 
<p><em>Written for and originally published at <a href="http://rhizome.org/editorial/2012/jan/23/book-review-programmed-visions-software-and-memory">Rhizome</a>.</em></p>
<p>After “getting fit” and whatever else people typically declare to be their new year’s resolutions, this year’s most popular goal is surprisingly nerdy: learning to code. Within the first week of 2012, over 250,000 people, <a href="http://www.bbc.co.uk/news/technology-16440126"><span class="s1">including New York’s mayor Michael Bloomberg</span></a>, had signed up for weekly interactive programming lessons on a site called <a href="http://codeyear.com/"><span class="s1">Code Year</span></a>. The website promises to put its users “on the path to building great websites, games, and apps.” But as <a href="http://www.newyorker.com/online/blogs/culture/2012/01/code-year.html"><span class="s1">New Yorker web editor Blake Eskin</span></a> writes, “The Code Year campaign also taps into deeper feelings of inadequacy... If you can code, the implicit promise is that you will not be wiped out by the enormous waves of digital change sweeping through our economy and society.” </p>
<p class="p1">If the entrepreneurs behind Code Year (and the masses of users they’ve signed up for lessons) are all hoping to ride the wave of digital change, Wendy Hui Kyong Chun, a professor of Modern Culture and Media at Brown University, is the academic trying to pause for a moment to take stock of the present situation and see where software is actually headed. All the frenzy about apps and “the cloud,” Chun argues, is just another turn in the “cycles of obsolescence and renewal” that define new media. The real change, which Chun lays out in her book <a href="http://mitpress.mit.edu/9780262015424"><span class="s1"><em>Programmed Visions: Software and Memory</em></span></a>, is that “programmability,” the logic of computers, has come to reach beyond screens into both the systems of government and economics and the metaphors we use to make sense of the world.</p>
<p class="p1">“Without [computers, human and mechanical],” writes Chun, “there would be no government, no corporations, no schools, no global marketplace, or, at the very least, they would be difficult to operate...Computers, understood as networked software and hardware machines, are—or perhaps more precisely set the grounds for—neoliberal governmental technologies...not simply through the problems (population genetics, bioinformatics, nuclear weapons, state welfare, and climate) they make it possible to both pose and solve, but also through their very logos, their embodiment of logic.” </p>
<p class="p1">To illustrate this logic, Chun draws extensively on history, theory, and detailed technical explanations, enriching cursory understandings of software. “Understanding software as a thing,” she writes, “means engaging its odd materializations and visualizations closely and refusing to reduce software to codes and algorithms—readily readable objects—by grappling with its simultaneous ambiguity and specificity.” Indeed, Chun <span class="s2">spends a lot of time specifying computer terms. What's the difference between hardware, software, firmware, and wetware? Source code, compiled code, and written instructions? What is a <em>thing </em>and how did software become one? Even for a fairly nerdy computer user there’s a lot to pick up on. The book really shines, however, when Chun waxes poetic on the more ambiguous aspects of software. </span></p>
<p class="p1"><span class="s2">The term “vaporware” refers to software that’s announced and advertised but never actually released for use, such as Ted Nelson’s infamous <a href="http://www.wired.com/wired/archive/3.06/xanadu.html"></a></span><span class="s1">Xanadu project</span>. Vaporware is problematic when it comes to theory because grand ideas and slick renderings rarely (if ever) align with the way technology looks and works in real life. Geert Lovink, Alexander Galloway, and others have called to banish “vapor theory,” theory built on hypothetical ideas about software rather than instantiations of it, which Lovink criticizes as, “gaseous flapping of the gums...generated with little exposure, much less involvement with those self-same technologies and artworks.” Chun concedes that while this embargo on vapor has been essential to grounding new media studies, “a rigorous engagement with software makes new media studies more, rather than less, vapory.” Vapor is not incidental to software, she argues, but actually essential to its understanding. This is what makes Chun’s theories exciting to follow: she engages renderings, dreams, and misunderstandings about technology rather than casting them aside. The key source of these misunderstandings is the use of the computer as metaphor.</p>
<p class="p1">People in previous generations conceptualized the world around them using technologies like clocks and steam engines. While these analog, mechanical devices are intricate, if one were to take apart a clock and and put it back together its inner workings could be understood. Digital computers are more complex because they are made of both tangible chips and immaterial codes, neither of which are intuitive to deconstruct. Further, all software interfaces, like the “paintbrush” tool in Photoshop, are metaphors themselves. “Who completely understands what one’s computer is actually doing at any given moment?” asks Chun, knowing that the answer is <em>nobody</em>. Yet this murky recursion of “unknowability” and vapors is exactly why Chun finds software to be such an apt metaphor for the world we live in. Recalling Stewart Brand’s call for a picture of the whole earth in 1968, Chun poses the question: what would a picture of the whole Internet look like? Except, in this case, to find out may not be the point. <span class="s2">In the way that the stock market is based on speculation—virally spreading fear about the future of a company (as opposed to concrete evidence or actual bad management decisions) can cause a stock to tank—a technologized world is increasingly based on conjecture.</span> In its unseeable, untouchable, and effectively unknowable nature, the computer represents the lens we need in order to think about the enormous and incomprehensible forces of social, economic, and political power that govern our lives. “[Software’s] ghostly interfaces embody—conceptually, metaphorically, virtually—a way to navigate our increasingly complex world,” writes Chun. </p>
<p class="p1"><span class="s3">The book looks at a broad range of examples from artists, scholars, and technologists to situate “programmability” in relation to everything from global systems like capitalist economics, neoliberal politics, and knowledge production to those of the mind and body: gender, race, and the structure of thought. The footnotes are full of interesting paths waiting to be followed: </span>Frederick P. Brooks on why programming is fun and hacking is addictive, Ben Shneiderman on direct manipulation interfaces, Brenda Laurel on computers as theatre and how that relates to skeuomorphism, and Thomas Y. Levin on the temporality of surveillance, to name just a few. While it’s tempting to look to this web of ideas and the history of computing as an <em>answer</em> for why things are the way they are today, Chun's point in invoking all these voices is that it’s not that clear cut.</p>
<p class="p1">Some of the book’s propositions about our relationship to computers seem overblown: a priestly source of power, a form of magic, code as a fetish. If nothing else, these phrases are provocative and point to how potent Chun finds software to be in the world today.<span class="s3"> </span><span>As more and more people find themselves able to create things out of code, it feels critical to understand software on both a practical and fundamental level.</span></p> 