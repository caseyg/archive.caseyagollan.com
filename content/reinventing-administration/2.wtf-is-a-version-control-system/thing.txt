title: WTF is a "Version Control System"
-
content:
If you've ever saved multiple versions of a file that you're working on (essay.doc, essay-draft.doc, essay-new.doc, essay-new-new.doc) you've basically operated your own manual version control system. Git is like a computerized secretary that keeps track of the history and versions of your files for you in a way that is easier, tidier, and more comprehensive. Once you've turned Git on within a folder you don't need to keep saving differently named versions. Instead, every time you've made a substantive change you "commit" it, telling Git in a sentence what kind of changes you've made. Git stores the original document, your note about what you've changed, and the actual bits that were changed. In a normal workflow you'd end up with a bunch of confusingly named variations of a file (or worse, no versions at all!), but Git allows you to cleanly access a file's history and jump back and forth through changes.

Going the extra step to commit your files makes possible a function called "diffing". A diff is a color coded view of the additions (green) and deletions (red) between any two files or versions of a file. To see what changed last time a file was edited, you could ask Git to show you a diff of the last two versions. If your Git project has a long history you could even ask to see a diff of a file over a span of several years. Because of the descriptive nature of commits, you'd also be shown a record of who made each edit along with their commit message explaining why.

In an administrative context this means that accountability is built in to the system. Every time anybody changes a file managed with Git, the system attaches a record of who, what, when, and why. In a big organization it usually takes some sleuthing to answer these questions. By keeping track of these simple factors Git helps rid information flows and histories of ambiguity.

To illustrate the magic of all this, I put together a demo below that diffs versions of a document from 1972 and 2012.

Because no Git-like system exists within Cooper's administration information is created, disseminated, and archived in a relatively disorganized manner. The amount of work that it took me to put together this example is evidence of the problem: I had to copy-and-paste the most recent version of the bylaws out of a PDF file in which they were posted to Cooper's website, search the internet for an old version of the bylaws (which I was eventually able to find in a different format on a completely different part of the website), manually diff the paragraphs, and then code up a visualization. If our administrators would start using Git-like systems today, the next time the bylaws change a computer would be able to do all of this automatically. If they had started even a year ago, I might've been able to find the entire history of the bylaws just by visiting the document itself. Relatively stable documents like bylaws don't seem to call urgently for accountability, but the necessity of these checks is undeniable when it comes to content like the college's mission statement.

Last year the webpage containing Cooper's mission statement was altered to remove the phrase "full-tuition scholarships." The Cooper community quickly raised a ruckus about its disappearance only to find that the phrase had been quietly restored. It was never made clear who removed the phrase, who added it back in, or where the order to do so came from. Some deny that this incident even happened. The administration's promises to be transparent and accountable fall to pieces when viewed against their systems which allow for anonymous and hasty changes to documents of fundamental importance. The ability to grok changes by looking at diffs and commit logs becomes even more important in situations where information is expected to change constantly.

In response to questions and critiques of the administration's strategy, a Financial FAQ was posted on Cooper's website. I visited the document a few times over the course of a few weeks and found each time that the document been expanded and reorganized without notice. While there is nothing wrong with a living document, it has been unnerving to refer to financial rationalizations that change frequently without any record. To make matters worse the document also has no listed author, aside from residing under the section of the Department of Finance and Administration run by T.C. Westcott. Like with the bylaws, an FAQ isn't the most important piece of information to keep track of, but it represents a systemic, fractal-like lack of accountability.

After hearing what Westcott herself goes through to make sense of all the college's finances I'd imagine she is sympathetic to my concerns. Following attending a financial information session, a fellow student and I carried on our discussion in Westcott's office where she pulled out a big red folder. "This is my 'Where Did The Money Go?' file", she joked. To answer several questions raised in the meeting, we reviewed numbers run this way and that way by different groups of people, but the amount of inferences that were left to be made was shocking. Even with complete access to financial documents and board meeting minutes which the Cooper community at large are not permitted to see, Westcott apparently has to do something akin to forensic accounting. Being careful not to muddy her financial analysis with personal opinion, Westcott admitted that even after you get the numbers to line up it isn't always clear what they indicate. What event does that spike correlate to? Why was a particular choice made at this time? Who authorized this change? When you start using tools and workflows that note who, what, when, and why along with every change, simple questions become immediately answerable and complex ones require much less digging. Using tools which passively generate a comprehensive history solves many problems related to the messy paper trails of bureaucratic administrations, but this is actually just a small part of what Git-like systems have in store.